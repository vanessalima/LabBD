/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaces.tables;

import conferencias.DBconnection;
import entidades.EDespesa;
import entidades.EInscrito;
import interfaces.AbstractJFrame;
import interfaces.Mensagem;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

/**
 *
 * @author vanessalima
 */
public class Despesa extends AbstractJFrame {

    private HashMap<String, Integer> listaEventos;
    private ArrayList<ArrayList<String>> listaPat;
    private EDespesa i;
    
    /**
     * Cria interface de despesa para cadastro/inserção
     * @param ant 
     */
    public Despesa(AbstractJFrame ant) {
        super(ant);
        initComponents();
        this.setTitle("Cadastrar de Despesa");
        this.cadastrarButton.setText("Cadastrar");
        this.mInitialize(null, null);
        this.loadEdicao();
        // TODO : SEtar as views para cadastro
    }

    /**
     * Cria a interface de despesa
     * recebendo os parâmetros que serão atualizados
     * @param ant
     * @param obj 
     */
    public Despesa(AbstractJFrame ant, Object obj) {
        super(ant);
        initComponents();
        this.setTitle("Atualização de Despesa");
        this.cadastrarButton.setText("Atualizar");
        this.infoLabel.setText("*Campos que não podem ser alterados");
        this.cbEvento.setEditable(false);
        this.cbEdicao.setEditable(false);
        if(obj instanceof EDespesa){
            this.i = (EDespesa) obj;
            this.cbEvento.getModel().setSelectedItem(i.getNomeEv());
            //this.cbEvento.setEditable(false);
            this.cbEdicao.getModel().setSelectedItem(i.getNumEd());
            //this.cbEdicao.setEditable(false);
            this.tfValor1.setText(i.getValorDesp());
            this.tfDataPatrocinio1.setText(i.getDataDesp());
            this.cbPatrocinio.getModel().setSelectedItem(i.getRazaoSocial() + " (" + i.getNomeEv() + "-" + 
                    i.getNumEd() + ")");
            this.tfDescricao.setText(i.getDescricaoDesp());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        tfValor = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tfDataPatrocinio = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        lEvento = new javax.swing.JLabel();
        cbEvento = new javax.swing.JComboBox();
        lEdicao = new javax.swing.JLabel();
        cbEdicao = new javax.swing.JComboBox();
        infoLabel = new javax.swing.JLabel();
        cancelarButton = new javax.swing.JButton();
        cadastrarButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        tfDataPatrocinio1 = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        cbPatrocinio = new javax.swing.JComboBox();
        lEdicao1 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        tfDescricao = new javax.swing.JTextField();
        tfValor1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        jLabel4.setText("Valor");

        jLabel6.setText("Data Patrocínio");

        try {
            tfDataPatrocinio.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel5.setFont(new java.awt.Font("Ubuntu", 2, 14)); // NOI18N
        jLabel5.setText("formato: MM/DD/YYYY");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lEvento.setText("Evento*");

        cbEvento.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbEventoFocusLost(evt);
            }
        });
        cbEvento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cbEventoMouseClicked(evt);
            }
        });
        cbEvento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbEventoActionPerformed(evt);
            }
        });
        cbEvento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cbEventoKeyTyped(evt);
            }
        });

        lEdicao.setText("Edição*");

        cbEdicao.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbEdicaoFocusLost(evt);
            }
        });

        infoLabel.setFont(new java.awt.Font("Ubuntu", 2, 15)); // NOI18N
        infoLabel.setText("* Campos obrigatórios");

        cancelarButton.setText("Cancelar");
        cancelarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarButtonActionPerformed(evt);
            }
        });

        cadastrarButton.setText("Cadastrar");
        cadastrarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastrarButtonActionPerformed(evt);
            }
        });

        jLabel8.setText("Data Despesa");

        try {
            tfDataPatrocinio1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        tfDataPatrocinio1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfDataPatrocinio1ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Ubuntu", 2, 14)); // NOI18N
        jLabel9.setText("formato: MM/DD/YYYY");

        cbPatrocinio.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbPatrocinioFocusLost(evt);
            }
        });
        cbPatrocinio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPatrocinioActionPerformed(evt);
            }
        });

        lEdicao1.setText("Patrocínio");

        jLabel10.setText("Descrição");

        tfDescricao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfDescricaoActionPerformed(evt);
            }
        });

        tfValor1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfValor1FocusLost(evt);
            }
        });
        tfValor1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfValor1ActionPerformed(evt);
            }
        });
        tfValor1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfValor1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfValor1KeyReleased(evt);
            }
        });

        jLabel1.setText("Valor");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lEdicao1)
                            .addComponent(jLabel1))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfValor1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfDataPatrocinio1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cbEvento, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbPatrocinio, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbEdicao, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(167, 210, Short.MAX_VALUE)))
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lEvento)
                            .addComponent(lEdicao))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(33, 33, 33)
                                .addComponent(tfDescricao))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(infoLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cancelarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cadastrarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(26, 26, 26))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lEvento)
                    .addComponent(cbEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbEdicao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lEdicao))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfDataPatrocinio1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8)
                    .addComponent(tfValor1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbPatrocinio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lEdicao1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(tfDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(infoLabel)
                    .addComponent(cadastrarButton)
                    .addComponent(cancelarButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbEventoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cbEventoFocusLost
        
    }//GEN-LAST:event_cbEventoFocusLost

    private void cbEventoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbEventoMouseClicked

    }//GEN-LAST:event_cbEventoMouseClicked

    /**
     * Fecha a janela de cadastro ou atualização de despesa sem nenhuma ação
     * @param evt 
     */
    private void cancelarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarButtonActionPerformed
        super.onClose();
    }//GEN-LAST:event_cancelarButtonActionPerformed

    /**
     * Insere o valor da despesa na base de dados, a partir das informações que o usuário inseriu
     * e retorna uma mensagem, seja esta de erro ou de sucesso
     * @param evt 
     */
    private void cadastrarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastrarButtonActionPerformed
        DBconnection conn;
        String sql;

        if(this.cadastrarButton.getText().matches("Cadastrar")){ // testa se é cadastro
            if(cbEvento.getSelectedItem().toString().matches("-") || cbEdicao.getSelectedItem().toString().matches("-") ){
                infoLabel.setForeground(Color.red);
                lEvento.setForeground(Color.red);
                lEdicao.setForeground(Color.red);
            } else {
                try{
                    conn = new DBconnection();
                    sql = "INSERT INTO despesa VALUES( "+
                            this.listaEventos.get(cbEvento.getSelectedItem().toString())+", "+
                            cbEdicao.getSelectedItem().toString()+", SEQ_CODDESP_DESPESA.NEXTVAL, ";
                    
                    if(this.cbPatrocinio.getSelectedItem().equals("-") || 
                            this.cbPatrocinio.getSelectedItem().equals("Insira um valor")) {
                        sql += "null, null, null, ";
                    }
                    else {
                        int item = this.cbPatrocinio.getSelectedIndex();
                        sql += this.listaPat.get(item).get(0) + ", " + this.listaPat.get(item).get(1) + ", " +
                            this.listaPat.get(item).get(2) + ", ";
                    }
                    
                    if (!tfDataPatrocinio1.getText().matches("  /  /    ")){
                        sql += "to_date('"+tfDataPatrocinio1.getText()+"', 'DD/MM/YYYY'), ";
                    }
                    else
                        sql += "null, ";
                    
                    if(this.tfValor1.getText().isEmpty()) {
                        sql += "null, ";
                    }
                    else
                        sql += this.tfValor1.getText() + ", ";
                    
                    sql += "'" + this.tfDescricao.getText() + "')";
                    System.out.println("SQL: "+sql);
                    conn.execute(sql);
                    conn.disconect();
                    (new Mensagem(this, this.anterior, null, SUCCESS, CADASTRO)).setEnabled(true);
                }catch(SQLException e){
                    String sujeito = "Patrocínio";
                    switch(e.getErrorCode()){
                        case -1 : // Chave duplicada
                        {
                            (new Mensagem(this, this.anterior, sujeito+" já cadastrado no sistema.", FAIL, CADASTRO)).setEnabled(true);
                            break;
                        }
                        case 1 : // Violacao de constraint UNIQUE
                        {
                            (new Mensagem(this, this.anterior, sujeito+" já cadastrado no sistema.", FAIL, CADASTRO)).setEnabled(true);
                            break;
                        }
                        case 911: // Erro de sintaxe! q feio ...
                        {
                            System.out.println("Erro de sintaxe do comando sql. Obs.: Talvez você tenha se esquecido de tirar o ; do final. :P ");
                            break;
                        }
                        default:
                        {
                            System.out.println("ERROR CODE: "+e.getErrorCode());
                            e.printStackTrace();
                            break;
                        }
                    }
                }
            }
        }
        else {
            try{
                    conn = new DBconnection();
                    sql = "UPDATE despesa  SET ";
                    
                    if(i.getCnpjPat().isEmpty()) {
                        sql += "cnpjPat = null, codEvPat = null, numEdPat = null, ";
                    }
                    else {
                        sql += "cnpjPat = " + i.getCnpjPat() + 
                                ", codEvPat = " + i.getCodEvPat() + 
                                ", numEdPat = " + i.getNumEdPat() + ", ";
                    }
                    
                    if (!i.getDataDesp().matches("  /  /    ")){
                        sql += "dataDesp = to_date('"+i.getDataDesp()+"', 'DD/MM/YYYY'), ";
                    }
                    else
                        sql += "dataDesp = null, ";
                    
                    if(i.getValorDesp().isEmpty()) {
                        sql += "valorDesp = null, ";
                    }
                    else
                        sql += "valorDesp = "+i.getValorDesp() + ", ";
                    
                    sql += "descricaoDesp = '" + i.getDescricaoDesp() + "'";
                    
                    sql += " WHERE codEv = " + i.getCodEv()+" AND numEd = "+
                            i.getNumEd()+" AND codDesp = " + i.getCodDesp();
                    System.out.println("SQL: "+sql);
                    conn.execute(sql);
                    conn.disconect();
                    (new Mensagem(this, this.anterior, null, SUCCESS, CADASTRO)).setEnabled(true);
                }catch(SQLException e){
                    String sujeito = "Patrocínio";
                    switch(e.getErrorCode()){
                        case -1 : // Chave duplicada
                        {
                            (new Mensagem(this, this.anterior, sujeito+" já cadastrado no sistema.", FAIL, CADASTRO)).setEnabled(true);
                            break;
                        }
                        case 1 : // Violacao de constraint UNIQUE
                        {
                            (new Mensagem(this, this.anterior, sujeito+" já cadastrado no sistema.", FAIL, CADASTRO)).setEnabled(true);
                            break;
                        }
                        case 911: // Erro de sintaxe! q feio ...
                        {
                            System.out.println("Erro de sintaxe do comando sql. Obs.: Talvez você tenha se esquecido de tirar o ; do final. :P ");
                            break;
                        }
                        default:
                        {
                            System.out.println("ERROR CODE: "+e.getErrorCode());
                            e.printStackTrace();
                            break;
                        }
                    }
                }
        }
    }//GEN-LAST:event_cadastrarButtonActionPerformed

    private void cbEdicaoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cbEdicaoFocusLost
        
    }//GEN-LAST:event_cbEdicaoFocusLost

    private void cbPatrocinioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cbPatrocinioFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_cbPatrocinioFocusLost

    private void tfDescricaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfDescricaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfDescricaoActionPerformed

    private void cbPatrocinioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPatrocinioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbPatrocinioActionPerformed

    private void tfValor1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfValor1ActionPerformed
        
    }//GEN-LAST:event_tfValor1ActionPerformed

    /**
     * Carrega os possíveis patrocínios para serem utilizados no combobox de patrocinios
     * a partir do valor passado para o valor da despesa
     * @param evt 
     */
    private void tfValor1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfValor1FocusLost
        System.out.println(this.tfValor1.getText());
        this.tfValor1.selectAll();
        // load patrocinios
        String sql = "SELECT patrocinio.cnpjPat, razaoSocialPat, patrocinio.codEv, nomeEv, patrocinio.numEd "
                    + "FROM PATROCINIO, EVENTO, PATROCINADOR"
                    + " WHERE patrocinio.cnpjPat = patrocinador.cnpjPat AND "
                        + " patrocinio.codEv = evento.codEv AND"
                        + " saldoPat > " +this.tfValor1.getText();
        ResultSet res;
        DBconnection conn = new DBconnection();
        listaPat = new ArrayList<ArrayList<String>>();
        try {
            res = conn.query(sql);
            this.cbPatrocinio.removeAllItems();
            if(res != null)
                this.cbPatrocinio.addItem("-");
            while(res != null && res.next()){
                ArrayList<String> tmp = new ArrayList<String>();
                tmp.add(res.getString(1));
                System.out.println(res.getString(1));
                tmp.add(res.getString(3));
                System.out.println(res.getString(3));
                tmp.add(res.getString(5));
                System.out.println(res.getString(5));
                listaPat.add(tmp);
                String auxNome = res.getString("razaoSocialPat");
                this.cbPatrocinio.addItem(auxNome + " (" + 
                        res.getString("nomeEv").substring(0, res.getString("nomeEv").length()) + 
                        "-" + res.getString("numEd") + ")");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Despesa.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_tfValor1FocusLost

    /**
     * Carrega os valores da edição quando um evento selecionado
     * @param evt 
     */
    private void cbEventoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbEventoActionPerformed
        this.loadEdicao();
    }//GEN-LAST:event_cbEventoActionPerformed

    private void cbEventoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbEventoKeyTyped
        
    }//GEN-LAST:event_cbEventoKeyTyped

    private void tfValor1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfValor1KeyReleased
        
    }//GEN-LAST:event_tfValor1KeyReleased

    private void tfValor1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfValor1KeyPressed
        
    }//GEN-LAST:event_tfValor1KeyPressed

    /**
     * Fecha a janela atual e retorna a anterior
     * @param evt 
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.onClose(evt);
    }//GEN-LAST:event_formWindowClosing

    private void tfDataPatrocinio1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfDataPatrocinio1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfDataPatrocinio1ActionPerformed

    /**
     * Busca na base de dados e carrega os possíveis valores da edição
     * para o evento selecionado pelo usuário
     */
    private void loadEdicao() {
        // Se for atualizacao nao faz nada
        // if(cadastrarButton.getText().matches("Atualizar")){return;}
        // Limpa o combobox
        if (cadastrarButton.getText().matches("Atualizar")){ return; }
        cbEdicao.removeAllItems();
        cbEdicao.addItem("-");
        if(!cbEvento.getSelectedItem().toString().matches("-")){
            // Busca as edicoes associadas ao evento selecionado
            DBconnection conn = new DBconnection();
            ResultSet rs;
            String sql;
            Integer aux;

            try { // Edicoes
                sql = "SELECT numed from edicao WHERE codEv = "+listaEventos.get(cbEvento.getSelectedItem().toString())+" ORDER BY numEd";
                rs = conn.query(sql);
                System.out.println("SQL: "+sql);
                while(rs != null && rs.next()){
                    aux = rs.getInt("numed");
                    cbEdicao.addItem(aux);
                }
                if (rs != null) { rs.close(); }
                conn.disconect();
            } catch (SQLException ex) {
                Logger.getLogger(Patrocinio.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    /**
     * 
     * @param cnpj
     * @param codev 
     */
    private void mInitialize(String cnpj, String codev) {
        if(this.cadastrarButton.getText().matches("Cadastrar")){
            cbEvento.addItem("-");
            cbEdicao.addItem("-");
            cbPatrocinio.addItem("Insira um valor");
        }
        // New nas listas
        this.listaEventos = new HashMap<String, Integer>();
        
        // popula os comboboxes de Evento e Patrocinador:
        DBconnection conn = new DBconnection();
        ResultSet rs = null;
        String sql;
        String auxNome=null;
              
        try { // Eventos
            if(codev == null) { // No caso de cadastro:
                sql = "SELECT codEv, nomeEv from evento order by nomeEv";
            
                rs = conn.query(sql);
                while(rs != null && rs.next()){
                    auxNome = rs.getString("nomeEv");
                    cbEvento.addItem(auxNome);
                    this.listaEventos.put(auxNome, rs.getInt("codEv"));
                }
            } else { // No caso de atualizacao:
                sql = "SELECT nomeEv from evento WHERE codEv = "+codev;
                rs = conn.query(sql);
                if(rs != null && rs.next()){
                    cbEvento.addItem(rs.getString("nomeEv"));
                }
            }
            if (rs != null) { rs.close(); } 
            
            // inserir código para carregar patrocinador ******
            
            conn.disconect();
        } catch (SQLException ex) {
            Logger.getLogger(Patrocinio.class.getName()).log(Level.SEVERE, null, ex);
        }
        
             
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cadastrarButton;
    private javax.swing.JButton cancelarButton;
    private javax.swing.JComboBox cbEdicao;
    private javax.swing.JComboBox cbEvento;
    private javax.swing.JComboBox cbPatrocinio;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lEdicao;
    private javax.swing.JLabel lEdicao1;
    private javax.swing.JLabel lEvento;
    private javax.swing.JFormattedTextField tfDataPatrocinio;
    private javax.swing.JFormattedTextField tfDataPatrocinio1;
    private javax.swing.JTextField tfDescricao;
    private javax.swing.JTextField tfValor;
    private javax.swing.JTextField tfValor1;
    // End of variables declaration//GEN-END:variables
}
