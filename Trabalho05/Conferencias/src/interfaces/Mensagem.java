/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaces;


import static interfaces.Config.ATUALIZACAO;
import static interfaces.Config.SUCCESS;
import javax.imageio.ImageIO;
import javax.swing.JFrame;

/**
 *
 * @author ch
 */
public class Mensagem extends javax.swing.JFrame implements Config {
   
    private AbstractJFrame cadastro;
    private AbstractJFrame loadFrame;
    private int status;
    
    /**
     * Create new form Mensagem
     * @param ant ponteiro pra tela anterior
     * @param msgInfo mensagem adicional que pode ser inserida na mensagem em caso
     *                de falha na operação. Pode ser null.
     * @param status pode ser SUCCESS ou FAIL. 
     * @param tipo pode ser CADASTRO, ATUALIZACAO ou REMOCAO
     */  
    public Mensagem(AbstractJFrame cadastro, AbstractJFrame load, String msgInfo, int status, int tipo){
        this.cadastro = cadastro;
        this.loadFrame = load;
        this.status = status;
        
        this.cadastro.setEnabled(false);
        this.cadastro.setVisible(false);
        
        initComponents();
        
        // Mostra a msg de acordo com seu tipo:
        String msg = null;
        switch(tipo){
            case CADASTRO:
            {
                if(status == SUCCESS) {
                    msg = new String("Cadastrado realizado com sucesso!");
                } else {    
                    msg = new String("Não foi possível realizar o cadastro.\n");
                }
                break;
            }
            case ATUALIZACAO:
            {
                if(status == SUCCESS) {
                    msg = new String("Atualização realizada com sucesso!");
                } else {    
                    msg = new String("Não foi possível realizar atualização nos dados.\n");
                }
                break;
            }
            case RELATORIO:
            {
                if(status == SUCCESS) {
                    msg = new String("Relatório exportado com sucesso!");
                } else {    
                    msg = new String("Não foi possível exportar o relatório.\n");
                }
                break;
            }
            /*case REMOCAO:
            {
                if(status == SUCCESS) {
                    msg = new String("Remoção realizada com sucesso!");
                } else {    
                    msg = new String("Não foi possível realizar a remoção dos dados.\n");
                }
                break;
            }*/
        }
        if(msg != null)
            msgLabel.setText(msg);
        if(msgInfo != null)
            msgLabel1.setText("Descrição do erro: "+msgInfo);
        
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        msgLabel = new javax.swing.JLabel();
        msgLabel1 = new javax.swing.JLabel();
        done = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/info.png"))); // NOI18N

        msgLabel.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N

        msgLabel1.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N

        done.setText("Ok");
        done.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(msgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(msgLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(25, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(done)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(msgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(msgLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(done)
                .addGap(9, 9, 9))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.onClose();
    }//GEN-LAST:event_formWindowClosing

    private void doneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneActionPerformed
        this.onClose();
    }//GEN-LAST:event_doneActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Mensagem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Mensagem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Mensagem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Mensagem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Mensagem().setVisible(true);
//            }
//        });
//    }

    
    protected void onClose() {
        this.dispose();
        if(this.status == SUCCESS) {
            this.cadastro.dispose();
            this.loadFrame.setVisible(true);
            this.loadFrame.setEnabled(true);
            this.loadFrame.reloadTable();
        }
        else {
            this.cadastro.setVisible(true);
            this.cadastro.setEnabled(true);
        }
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton done;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel msgLabel;
    private javax.swing.JLabel msgLabel1;
    // End of variables declaration//GEN-END:variables
}
